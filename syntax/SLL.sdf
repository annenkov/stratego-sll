%% Grammar for the SLL language
%% By default, based on an example "entities" syntax
module SLL

imports Common

exports

  context-free start-symbols
    Start

  context-free syntax

    "program" ID Definition*                          -> Start {cons("Program")}
    "main" "=" Main                                   -> Definition {cons("MainDef")}
    Expr                                              -> Main {cons("Expr")}
    FUNCNAME "(" {Variable ","}* ")" "=" Expr              -> Definition {cons("FDef")}
    FUNCNAME "(" Pattern ")" "=" Expr                 -> Definition {cons("GDef")}
    FUNCNAME "(" Pattern "," {Variable ","}* ")" "=" Expr  -> Definition {cons("GDef")}
    CTOR"(" {Variable ","}* ")"                            -> Pattern {cons("Pat")}
    ID                                                -> Variable {cons("DVar")}
    FUNCNAME"(" {Expr ","}* ")"                       -> Expr {cons("FCall")}
    CTOR"(" {Expr ","}* ")"                           -> Expr {cons("Ctor")}
    ID                                                -> Expr {cons("Var")}
    "Let" ID "=" Expr "in" Expr                       -> Expr {cons("Let")}
