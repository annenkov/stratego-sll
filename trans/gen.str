module gen
imports
    libstratego-lib
    libstratego-aterm
    lib/editor-common.generated
    include/SLL
    interpreter
    conftree

rules

    transform-program(|prog) = build-conf-tree(|prog); generate-program

    generate-program: tree -> Program("prog", <conc> (defs*, [MainDef(Expr(call))]))
    with
        (call, defs*) := <gen> tree

    gen: Node(t1, Transient(t2)) -> (call1, [FDef(name, <map(\Var(x) -> DVar(x)\)>args, call2)|defs*])
    with
        args := <collect-vars> t1;
        name := <new>;
        call1 := FCall(name, args);
        <debug(!"Gen transient")> call1;
        (call2, defs*) := <gen> t2;
    rules (
        mapping:+ t1 -> call1
        )

    gen: Node(Ctor(name, [arg]), Decompose([t])) -> (call2, defs*)
    with
        <debug(!"Gen decompose")> t;
       (arg1, defs*) := <gen> t;
        call2 := Ctor(name, [arg1])

    gen: Node(t1, Variants(pats*, t*)) -> (call1, <conc> (defs*, gdefs*))
    with
        args := <collect-vars> t1;
        name := <new>;
        call1 := FCall(name, args);
    rules (
        mapping:+ t1 -> call1
        )
    with
        <debug(!"Gen variants: ")> call1;
        (calls*, defs*) := <gen'> t*;
        gdefs* := <map(make-gdef(|name))> <zip> (pats*, calls*);
        <debug(!"G-defs: ")> gdefs*

    gen: Leaf(Fold(t, renamings)) -> (<substitute(|renamings)> t1, [])
    with
        <debug> <all-keys-mapping>;
        t1 := <mapping> t

    gen: Leaf(t) -> (t, [])

    make-gdef(|name): (pat, body) -> GDef(name, pat, [], body)

    gen': t* -> t'
    with
        <debug(!"Gen': ")> t*;
    	t' := <foldl(gen-helper)> (<map(gen)> t*, ([],[]))

    gen-helper: ((t1,t2), (e1, e2)) -> (<conc> (e1, [t1]), <conc> (e2, t2))

    test-gen: t -> <pp-sll-string> new-prog
    with
        <collect-one(?MainDef(Expr(e)))> t;
        conf-tree := <build-conf-tree(|t)> e;
        new-prog := <generate-program> conf-tree

    collect-vars = collect-all(?Var(x))