module gen
imports
    libstratego-lib
    libstratego-aterm
    lib/editor-common.generated
    include/SLL
    interpreter
    conftree
    utils

rules

    transform-program(|prog) = build-conf-tree(|prog); generate-program
    deforest-program(|prog) = build-conf-tree(|prog); simplify; generate-program

    generate-program: tree -> Program("example", <conc> (defs*, [MainDef(Expr(call))]))
    with
        (call, defs*) := <gen> tree

    gen: Node(t1, Transient(t2)) -> (call1, [FDef(name, <map(\Var(x) -> DVar(x)\)> args, call2)|defs*])
    with
        args := <collect-vars> t1;
        name := <gen-name(|"f")>;
        call1 := FCall(name, args);
        <debug(!"Gen transient")> (<pp-sll-string> call1, <pp-sll-string> t1);
        (call2, defs*) := <gen> t2;
    rules (
        mapping:+ t1 -> call1
        )

    gen: Node(Ctor(name, args*), Decompose(t*)) -> (Ctor(name, calls*), defs*)
    with
        <debug(!"Gen decompose")> t*;
       (calls*, defs*) := <gen'> t*

    gen: Node(t1, Variants(pats*, t*)) -> (call1, <conc> (defs*, gdefs*))
    with
        args := <collect-vars> t1;
        name := <gen-name(|"g")>;
        call1 := FCall(name, args);
	    rules (
	        mapping:+ t1 -> call1
	        );
        <debug(!"Gen variants")> (<pp-sll-string> call1, <pp-sll-string> t1, args);
        (calls*, defs*) := <gen'> t*;
        gdefs* := <map(make-gdef(|name, args))> <zip> (pats*, calls*);
        <debug(!"G-defs: ")> gdefs*

    gen: Leaf(Fold(t, renamings)) -> (<substitute(|renamings)> t1, [])
    with
        <debug> <all-keys-mapping>;
        t1 := <mapping> t

    gen: Leaf(t) -> (t, [])

    make-gdef(|name, args): (pat, body) -> GDef(name, pat, <map(\Var(x) -> DVar(x)\)> args', body)
    where
    	args' := <?[_|<id>]> args;
    	<?[_|_]> args'

    make-gdef(|name, args): (pat, body) -> GDef(name, pat, body)
    where
        <?[_|_]> args

    gen': t* -> t'
    with
        <debug(!"Gen': ")> t*;
    	t' := <foldl(gen-helper)> (<map(gen)> t*, ([],[]))

    gen-helper: ((t1,t2), (e1, e2)) -> (<conc> (e1, [t1]), <conc> (e2, t2))

    collect-vars = collect-all(?Var(_), conc)