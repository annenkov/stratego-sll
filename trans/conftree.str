module conftree

imports
    libstratego-lib
    libstratego-aterm
    lib/editor-common.generated
    include/SLL
    interpreter
    testhelpers

signature
    sorts
        Step Tree Either
    constructors
        Transient   : Expr -> Step
        Stop        : Step
        Variants    : [Expr] -> Step

        Node        : Expr * [Expr] -> Tree
        Leaf        : Expr -> Tree

        Left        : Expr -> Either
        Right       : Expr -> Either
rules

    prettify-tree(pp) = topdown(try(pp))

    build-conf-tree(|prog) = conf-tree(rewrite-step-alt(|prog)|prog)
    conf-tree(r|prog) = !(<id>, []); ana-tree(drive(r|prog))

    drive(r|prog): (t@Ctor(_, args*), acc) -> Right((t, <map(!(<id>, [t|acc]))> args*))
    where
        <debug(!"Decompose: ")> t;
        <not(is-complete)> t

    drive(r|prog): (t, acc) -> Right((t, [(new-t, [t|acc])]))
     where
        <debug(!"Transient?")> t;
        new-t := <r> t;
        <debug(!"Transient: ")> t;
        <not(is-complete <+ foldable(|acc))> t


    drive(r|prog): (t, acc) -> Right((t, <map(!(<id>, [t|acc]))> res))
    where
        <debug(!"Variants?")> t;
        res := <variants-r(|prog)> t;
        <debug(!"Variants: ")> res;
        <not(is-complete <+ foldable(|acc))> t

    drive(r|prog): (t, acc) -> Left(t)
    where
        <is-complete <+ foldable(|acc)> t;
        <debug(!"Foldable: ")> t

    foldable(|acc): t -> <fetch(eq-mod-renaming(|t))> acc

    ana-tree(unspool): t -> <ana-tree-helper(unspool)> <unspool> t
    with
        <debug(!"Acc: ")> <?(_, <id>)> t

    ana-tree-helper(unspool): Left(t) -> Leaf(t)
    ana-tree-helper(unspool): Right((t, y)) -> Node(t, <map(ana-tree(unspool))> y)

    variants-r(|prog) = variants(|prog) <+ (?FCall(name, [a|args*]); <variants-r(|prog)> a; inject(|name, args*))

    inject(|name, args*) = map(!FCall(name, [<id>|args*]))

    variants(|prog): fcall@FCall(f-name, [Var(_)|_]) -> <map(variants-step(|fcall))> g-defs*
    where
        g-defs* := <collect-all(?GDef(f-name, _, _, _)); ?[_|_]> prog;
        <debug> g-defs*

    variants-step(|f-call): GDef(name, pat, args*, body) -> res
    where
        <?FCall(f-name, [Var(var-name)|_])> f-call;
        res := <substitute(|[(var-name, <pat2ctor> pat)])> f-call

    pat2ctor: Pat(name, args*) -> Ctor(name, <topdown(try(\DVar(x) -> Var(<new> x)\))> args*)

    eq-mod-renaming(|t1): t2 -> <equal> (t1', t2')
    where
        <debug(!"Comparing")> (t1, t2);
    	t1' := <erase-names> t1;
    	t2' := <erase-names> t2

    erase-names = topdown(try(?Var(_); !Var("_")))

    test-eq: t -> <get-defs(?FDef("g", _, <id>) <+ ?FDef("f", _, <id>)); ?[t1, t2]; <eq-mod-renaming(|t1)> t2> t
    test-not-eq: t -> <not(test-eq)> t
