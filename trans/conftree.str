module conftree

imports
    libstratego-lib
    libstratego-aterm
    lib/editor-common.generated
    include/SLL
    interpreter
    utils

signature
    sorts
        Step Tree Either
    constructors
        Transient   : Expr -> Step
        Fold        : Expr * [String] -> Step
        Stop        : Expr -> Step
        Variants    : String * [Pattern] * [Expr] -> Step
        Decompose   : [Expr] -> Step

        Node        : Expr * Step -> Tree
        Leaf        : Step -> Tree

        Left        : Expr -> Either
        Right       : Expr -> Either
rules
	max-conf-size = !20

    prettify-tree(pp) = topdown(try(pp))

    build-conf-tree(r,p|prog): t -> <ana-tree(try(generalize); drive(r|prog); try(p))> t
    with
        init-trace

    drive(r|prog): t@Ctor(_,_) -> Stop(t)
    where
        <is-complete> t

    drive(r|prog): t@Var(_) -> Stop(t)

    drive(r|prog): t@Ctor(_, args*@[_|_]) -> (t, Decompose(args*))
    where
        <not(is-complete)> t;
        <debug(!"Decompose: ")> t

    drive(r|prog): t@FCall(_, _) -> (t, Transient(new-t))
    where
        <not(foldable)> t;
        new-t := <r> t;
        <debug(!"Transient: ")> (<pp-sll-string> t, <pp-sll-string> new-t);
        <if (?FCall(_,_)) then update-trace(|t) end> new-t

    drive(r|prog): t@FCall(_, _) -> (t, Variants(v, pats*, <map(r)> funcalls*))
    where
        (v, pats*, funcalls*) := <variants-r(|prog)> t;
        <debug(!"Variants: ")> funcalls*;
        <not(foldable)> t;
        update-trace(|t)

    drive(r|prog): t@FCall(_, _) -> Fold(folded-to, renamings)
    where
        (folded-to, renamings) := <foldable> t;
        <debug(!"Foldable: ")> (<pp-sll-string> t, <pp-sll-string> folded-to)

    drive(r|prog): t@Let(v, sub-expr, body) -> (t, Decompose([sub-expr, body]))
    where
        <not(is-complete)> t;
        <debug(!"Decompose on Let: ")> t

    generalize: t@FCall(f-name, args*) -> Let(new-var, max-subconf, let-body)
    where
        <gti> (<conf-size> t, <max-conf-size>);
        max-subconf := <exatract-max-conf> args*;
        new-var := <gen-name(|"v")>;
        let-body := FCall(f-name, <map(try(?max-subconf; !Var(new-var)))> args*)

    max-conf: (c1, c2) -> c
    where
    	c := <if gti then !c1 else !c2 end> (<conf-size> c1, <conf-size> c2)

    exatract-max-conf = ?[fst|_]; foldr(!fst, max-conf)

    foldable: t -> (t', renamings)
    where
        // using direct or reverse order of serching foldable nodes gives different configuration trees
        (t', renamings) := <getfirst(eq-mod-renaming(|t))> <trace>

    ana-tree(unspool) =
        switch unspool
            case ?Stop(t): !Leaf(Stop(t))
            case ?Fold(t, renamings): !Leaf(Fold(t, renamings))
            case ?(t, Decompose(y)): !Node(t, Decompose(<map(ana-tree(unspool))> y))
            case ?(t, Variants(v, pats*, y)): !Node(t, Variants(v, pats*, <map(ana-tree(unspool))> y))
            case ?(t, Transient(y)): !Node(t, Transient(<ana-tree(unspool)> y))
        end

    variants-r(|prog) = variants(|prog) <+ (?FCall(name, [a|args*]); <variants-r(|prog)> a; inject(|name, args*))

    inject(|name, args*) = (id, id, map(!FCall(name, [<id>|args*])))

    variants(|prog): fcall@FCall(f-name, [Var(v)|_]) -> (v, pats*, fcalls*)
    where
        g-defs* := <collect-all(?GDef(f-name, _,_,_) <+ ?GDef(f-name, _,_)); ?[_|_]> prog;
        res := <map(variants-step(|fcall))> g-defs*;
        pats* := <map(?(<id>, _))> res;
        fcalls* := <map(?(_, <id>))> res

    variants-step(|f-call): GDef(name, pat, body) -> <variants-step(|f-call)> GDef(name, pat, [], body)
    variants-step(|f-call): GDef(name, pat, args*, body) -> (new-pat, res)
    where
        <?FCall(f-name, [Var(var-name)|vars*])> f-call;
        new-pat := <pat-with-new-vars> pat;
        <debug(!"Variant step: ")> (var-name, <pat2ctor> new-pat);
        res := <subst-once(|Var(var-name), <pat2ctor> new-pat)> f-call

    subst-once(|t, t'): FCall(name, args*) -> FCall(name, subst-args*)
    where
        subst-args*  := <oncetd(?t; !t')> args*

    pat-with-new-vars: Pat(n, a*) -> Pat(n, new-vars*)
    with
        new-vars* := <topdown(try(\DVar(_) -> DVar(<gen-name(|"v")>)\))> a*

    pat2ctor: Pat(name, args*) -> Ctor(name, <topdown(try(\DVar(x) -> Var(x)\))> args*)

    eq-mod-renaming(|t1): t2 -> (t2, renamings)
    where
    	<equal> (<erase-names> t1, <erase-names> t2);
    	renamings := <zip> (<collect-all(?Var(<id>))> t2, <collect-all(?Var(_))> t1)

    erase-names = topdown(try(?Var(_); !Var("_")))

    // using dynamic rules to trace all nodes to fold tree later
    init-trace: _ -> None()
    with
        rules ( trace := [] )

    update-trace(|t): _ -> None()
    with
        rules ( trace := <if ?FCall(_,_) then ![t|<trace>] else trace end> t )

    // simplification rules used to deforest program
    simplify = ?t; bottomup(try(remove-transient(|t)))
    remove-transient(|p): Node(t, Transient(n)) -> n
    where
        <not(is-base(|t))> p

    is-base(|t) = collect-one(?Fold(t, _))

    conf-size = occurrences(?FCall(_,_) <+ ?Ctor(_,_) <+ ?Var(_) <+ ?Let (_,_,_))

    propagate: (t, Variants(v, pats*, vs*)) -> (t, Variants(v, pats*, res))
    where
        res := <map(propagate'(|v))> <zip> (pats*, vs*)

    propagate'(|v): (pat, e) -> <substitute(|[(v, <pat2ctor> pat)])> e