module sll

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/SLL
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  check
  interpreter
  conftree
  refactor

rules // Main editor interface (defined by editor/SLL-Builders and -References.esv)

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      analyze;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast

  run-main:
    (selected, position, ast, path, project-path) -> (filename, <pp-sll-string> result)
    with
      filename := <guarantee-extension(|"result")> path;
      <collect-one(?MainDef(main-def))> selected;
      result   := <rewrite-main-def(|ast)> main-def

  trace-main:
    (selected, position, ast, path, project-path) -> (filename, <map(pp-sll-string)> trace)
    with
      filename := <guarantee-extension(|"result")> path;
      <collect-one(?MainDef(main-def))> selected;
      trace := <rewrite-trace-main-def(|ast)> main-def

  build-conf-tree:
      (selected, position, ast, path, project-path) -> (filename, <prettify-tree(pp-sll-string)> conf-tree)
    with
      filename := <guarantee-extension(|"result")> path;
      <collect-one(?MainDef(Expr(main-def)))> selected;
      conf-tree := <build-conf-tree(|ast)> main-def

  build-variants-for-main: p -> <map(pp-sll-string)> <variants(|p)> main-def
    with
        main-expr := <collect-one(?MainDef(Expr(main-def)))> p

  // Prints the entries in the index of all files.
  debug-index-show-all-files:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
      result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>

  // Prints the entries in the index of the current file.
  debug-index-show-current-file:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path

    // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      <debug(!"Resolve: ")> node;
      Type(type) := node;
      target     := <GetEntity> type

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) ->
    ["String", "Int" | proposals]
    where
      if !node => Type(COMPLETION(prefix)) then
        proposals := <all-keys-GetEntity>
      end
