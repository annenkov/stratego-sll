module check

imports
  libstratego-lib
  include/SLL
  lib/editor-common.generated
  utils

rules

  // Analysis: does a topdown traversal of the tree,
  // and tries to apply the record-func rule.
  analyze:
    t -> t
    with
      <topdown(try(record-func))> t

  // Records the definition of a function in a dynamic rule GetFunc.
  record-func:
    FDef(name, vars*, body) -> FDef(name, vars*, body)
    with
      rules(
        GetFunc :+ name -> name
      )

   record-func:
    GDef(name, pat, body) -> GDef(name, pat, body)
    with
      rules(
        GetFunc :+ name -> name
      )

    record-func:
    GDef(name, pat, vars*, body) -> GDef(name, pat, vars*, body)
    with
      rules(
        GetFunc :+ name -> name
      )
rules

  // Reports an error if an entity is defined more than once.
  // This constraint is implemented by testing if the "bag" of
  // all entities x is not a singleton list.
  constraint-error:
    Entity(x, _) -> (x, $[Duplicate entity name])
    where
      not(<bagof-GetFunc> x => [_])

  constraint-error:
    FCall(x, _) -> (x, $[Function not defined: [x]])
    where
      <bagof-GetFunc> x => []

  constraint-error:
    FDef(x, vars*, body) -> (x, $[Variables not defined: [<string-join(|",")> not-in-def]])
    where
        vars-in-body* := <map(?Var(<id>))> <collect-all(?Var(_))> body;
        not-in-def := <diff> (<make-set> vars-in-body*, <make-set> <map(?DVar(<id>))> vars*);
        not(<?[]> not-in-def)

  constraint-error:
    GDef(x, Pat(p-name, p-vars*), vars*, body) -> (x, $[Variable not defined: [<string-join(|",")> not-in-def]])
    where
        vars-in-body* := <map(?Var(<id>))> <collect-all(?Var(_))> body;
        not-in-def := <diff> (<make-set> vars-in-body*, <make-set> <map(?DVar(<id>))> (<conc> (p-vars*, vars*)));
        not(<?[]> not-in-def)

  constraint-error: GDef(x, pat, body) -> <constraint-error> GDef(x, pat, [], body)

  constraint-warning:
    Entity(x, _) -> (x, $[Entity names must start with a capital])
    where
      not(<string-starts-with-capital> x)

  constraint-note:
    Module(x @ "example", _) -> (x, $[Note])
